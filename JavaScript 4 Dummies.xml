<templateSet group="JavaScript 4 Dummies">
  <template name="jsd_all" value="/*This snippet returns true if the predicate function returns true for all elements &#10;in a collection and false otherwise. You can omit the second argument fnif you want &#10;to use Booleanas a default value.*/&#10;const all = (arr, fn = Boolean) =&gt; arr.every(fn);&#10;/*&#10;all([4, 2, 3], x =&gt; x &gt; 1); // true&#10;all([1, 2, 3]); // true&#10;*/" description="This snippet returns true if the predicate function returns true for all elements in a collection and false otherwise. You can omit the second argument fnif you want to use Booleanas a default value." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_allEqual" value="/*This snippet checks whether all elements of the array are equal.*/&#10;const allEqual = arr =&gt; arr.every(val =&gt; val === arr[0]);&#10;/*&#10;allEqual([1, 2, 3, 4, 5, 6]); // false&#10;allEqual([1, 1, 1, 1]); // true&#10;*/" description="This snippet checks whether all elements of the array are equal." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_aprxEqual" value="/*This snippet checks whether two numbers are approximately equal to each other, with a small difference.*/&#10;const approximatelyEqual = (v1, v2, epsilon = 0.001) =&gt; Math.abs(v1 - v2) &lt; epsilon;&#10;/*&#10;approximatelyEqual(Math.PI / 2.0, 1.5708); // true&#10;*/" description="This snippet checks whether two numbers are approximately equal to each other, with a small difference." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_arrayToCSV" value="/*This snippet converts the elements that don’t have commas or double quotes to strings with comma-separated values.*/&#10;const arrayToCSV = (arr, delimiter = ',') =&gt;&#10;  arr.map(v =&gt; v.map(x =&gt; `&quot;${x}&quot;`).join(delimiter)).join('\n');&#10;/*&#10;arrayToCSV([['a', 'b'], ['c', 'd']]); // '&quot;a&quot;,&quot;b&quot;\n&quot;c&quot;,&quot;d&quot;'&#10;arrayToCSV([['a', 'b'], ['c', 'd']], ';'); // '&quot;a&quot;;&quot;b&quot;\n&quot;c&quot;;&quot;d&quot;'&#10;*/" description="This snippet converts the elements that don’t have commas or double quotes to strings with comma-separated values." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_average" value="/*This snippet returns the average of two or more numerical values.*/&#10;const average = (...nums) =&gt; nums.reduce((acc, val) =&gt; acc + val, 0) / nums.length;&#10;/*&#10;average(...[1, 2, 3]); // 2&#10;average(1, 2, 3); // 2&#10;*/" description="This snippet returns the average of two or more numerical values." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_averageBy" value="/*This snippet returns the average of an array after initially doing the mapping of&#10;each element to a value using a given function.*/&#10;const averageBy = (arr, fn) =&gt;&#10;  arr.map(typeof fn === 'function' ? fn : val =&gt; val[fn]).reduce((acc, val) =&gt; acc + val, 0) /&#10;  arr.length;&#10;/*&#10;averageBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o =&gt; o.n); // 5&#10;averageBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n'); // 5&#10;*/" description="This snippet returns the average of an array after initially doing the mapping of each element to a value using a given function." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_bifurcate" value="/*This snippet splits values into two groups and then puts a truthy element of filterin the first group, &#10;and in the second group otherwise.&#10;You can use Array.prototype.reduce()and Array.prototype.push()to add elements to groups based on filter.*/&#10;const bifurcate = (arr, filter) =&gt;&#10;  arr.reduce((acc, val, i) =&gt; (acc[filter[i] ? 0 : 1].push(val), acc), [[], []]);&#10;/*  &#10;bifurcate(['beep', 'boop', 'foo', 'bar'], [true, true, false, true]); &#10;// [ ['beep', 'boop', 'bar'], ['foo'] ]&#10;*/" description="This snippet splits values into two groups and then puts a truthy element of filterin the first group, and in the second group otherwise." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_bifurcateBy" value="/*This snippet splits values into two groups, based on a predicate function. If the predicate function returns &#10;a truthy value, the element will be placed in the first group. Otherwise, it will be placed in the second group.&#10;You can use Array.prototype.reduce()and Array.prototype.push()to add elements to groups, &#10;based on the value returned by fnfor each element.*/&#10;const bifurcateBy = (arr, fn) =&gt;&#10;  arr.reduce((acc, val, i) =&gt; (acc[fn(val, i) ? 0 : 1].push(val), acc), [[], []]);&#10;/*&#10;bifurcateBy(['beep', 'boop', 'foo', 'bar'], x =&gt; x[0] === 'b'); &#10;// [ ['beep', 'boop', 'bar'], ['foo'] ]&#10;*/" description="This snippet splits values into two groups, based on a predicate function. If the predicate function returns a truthy value, the element will be placed in the first group. Otherwise, it will be placed in the second group." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_byteSize" value="/*This snippet returns the length of a string in bytes.*/&#10;const byteSize = str =&gt; new Blob([str]).size;&#10;/*&#10;byteSize('😀'); // 4&#10;byteSize('Hello World'); // 11&#10;*/" description="This snippet returns the length of a string in bytes." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_capitalize" value="/*This snippet capitalizes the first letter of a string.*/&#10;const capitalize = ([first, ...rest]) =&gt;&#10;  first.toUpperCase() + rest.join('');&#10;/*&#10;capitalize('fooBar'); // 'FooBar'&#10;capitalize('fooBar', true); // 'FooBar'&#10;*/" description="This snippet capitalizes the first letter of a string." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_capitalizeEveryWord" value="/*This snippet capitalizes the first letter of every word in a given string.*/&#10;const capitalizeEveryWord = str =&gt; str.replace(/\b[a-z]/g, char =&gt; char.toUpperCase());&#10;/*&#10;capitalizeEveryWord('hello world!'); // 'Hello World!'&#10;*/" description="This snippet capitalizes the first letter of every word in a given string." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_castArray" value="/*This snippet converts a non-array value into array.*/&#10;const castArray = val =&gt; (Array.isArray(val) ? val : [val]);&#10;/*&#10;castArray('foo'); // ['foo']&#10;castArray([1]); // [1]&#10;*/" description="This snippet converts a non-array value into array." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_compact" value="/*This snippet removes false values from an array.*/&#10;const compact = arr =&gt; arr.filter(Boolean);&#10;/*&#10;compact([0, 1, false, 2, '', 3, 'a', 'e' * 23, NaN, 's', 34]); &#10;// [ 1, 2, 3, 'a', 's', 34 ]&#10;*/" description="This snippet removes false values from an array." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_countOccurrences" value="/*This snippet counts the occurrences of a value in an array.*/&#10;const countOccurrences = (arr, val) =&gt; arr.reduce((a, v) =&gt; (v === val ? a + 1 : a), 0);&#10;/*&#10;countOccurrences([1, 1, 2, 1, 2, 3], 1); // 3&#10;*/" description="This snippet counts the occurrences of a value in an array." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_createDirectory" value="/*This snippet uses existsSync() to check whether a directory exists and then mkdirSync()&#10;to create it if it doesn’t.*/&#10;const fs = require('fs');&#10;const createDirIfNotExists = dir =&gt; (!fs.existsSync(dir) ? fs.mkdirSync(dir) : undefined);&#10;createDirIfNotExists('test'); &#10;// creates the directory 'test', if it doesn't exist" description="This snippet uses existsSync() to check whether a directory exists and then mkdirSync() to create it if it doesn’t." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_dayOfYear" value="/*This snippet gets the day of the year from a Dateobject.*/&#10;const dayOfYear = date =&gt;&#10;  Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);&#10;/*&#10;dayOfYear(new Date()); // 272&#10;*/" description="This snippet gets the day of the year from a Dateobject." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_decapitalize" value="/*This snippet turns the first letter of a string into lowercase.*/&#10;const decapitalize = ([first, ...rest]) =&gt;&#10;  first.toLowerCase() + rest.join('')&#10;/*&#10;decapitalize('FooBar'); // 'fooBar'&#10;decapitalize('FooBar'); // 'fooBar&#10;*/" description="This snippet turns the first letter of a string into lowercase." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_deepFlatten" value="/*This snippet flattens an array recursively.*/&#10;const deepFlatten = arr =&gt; [].concat(...arr.map(v =&gt; (Array.isArray(v) ? deepFlatten(v) : v)));&#10;/*&#10;deepFlatten([1, [2], [[3], 4], 5]); // [1,2,3,4,5]&#10;*/" description="This snippet flattens an array recursively." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_default" value="/*This snippet assigns default values for all properties in an object that are undefined.*/&#10;const defaults = (obj, ...defs) =&gt; Object.assign({}, obj, ...defs.reverse(), obj);&#10;/*&#10;defaults({ a: 1 }, { b: 2 }, { b: 6 }, { a: 3 }); // { a: 1, b: 2 }&#10;*/" description="This snippet assigns default values for all properties in an object that are undefined." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_defer" value="/*This snippet delays the execution of a function until the current call stack is cleared.*/&#10;const defer = (fn, ...args) =&gt; setTimeout(fn, 1, ...args);&#10;/*&#10;defer(console.log, 'a'), console.log('b'); // logs 'b' then 'a'&#10;*/" description="This snippet delays the execution of a function until the current call stack is cleared." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_degToRads" value="/*This code snippet can be used to convert a value from degrees to radians.*/&#10;const degreesToRads = deg =&gt; (deg * Math.PI) / 180.0;&#10;/*&#10;degreesToRads(90.0); // ~1.5708&#10;*/" description="This code snippet can be used to convert a value from degrees to radians." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_difference" value="/*This snippet finds the difference between two arrays.*/&#10;const difference = (a, b) =&gt; {&#10;  const s = new Set(b);&#10;  return a.filter(x =&gt; !s.has(x));&#10;};&#10;/*&#10;difference([1, 2, 3], [1, 2, 4]); // [3]&#10;*/" description="This snippet finds the difference between two arrays." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_differenceBy" value="/*This method returns the difference between two arrays, after applying&#10;a given function to each element of both lists.*/&#10;const differenceBy = (a, b, fn) =&gt; {&#10;  const s = new Set(b.map(fn));&#10;  return a.filter(x =&gt; !s.has(fn(x)));&#10;};&#10;/*&#10;differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor); // [1.2]&#10;differenceBy([{ x: 2 }, { x: 1 }], [{ x: 1 }], v =&gt; v.x); // [ { x: 2 } ]&#10;*/" description="This method returns the difference between two arrays, after applying a given function to each element of both lists." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_differenceWith" value="/*This snippet removes the values for which the comparator function returns false.*/&#10;const differenceWith = (arr, val, comp) =&gt; arr.filter(a =&gt; val.findIndex(b =&gt; comp(a, b)) === -1);&#10;/*&#10;differenceWith([1, 1.2, 1.5, 3, 0], [1.9, 3, 0], (a, b) =&gt; Math.round(a) === Math.round(b)); &#10;// [1, 1.2]&#10;*/" description="This snippet removes the values for which the comparator function returns false." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_digitize" value="/*This snippet gets a number as input and returns an array of its digits.*/&#10;const digitize = n =&gt; [...`${n}`].map(i =&gt; parseInt(i));&#10;/*&#10;digitize(431); // [4, 3, 1]&#10;*/" description="This snippet gets a number as input and returns an array of its digits." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_distance" value="/*This snippet returns the distance between two points by calculating the Euclidean distance.*/&#10;const distance = (x0, y0, x1, y1) =&gt; Math.hypot(x1 - x0, y1 - y0);&#10;/*&#10;distance(1, 1, 2, 3); // 2.23606797749979&#10;*/" description="This snippet returns the distance between two points by calculating the Euclidean distance." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_dropElements" value="/*This snippet returns a new array with n elements removed from the left.*/&#10;const drop = (arr, n = 1) =&gt; arr.slice(n);&#10;/*&#10;drop([1, 2, 3]); // [2,3]&#10;drop([1, 2, 3], 2); // [3]&#10;drop([1, 2, 3], 42); // []&#10;*/" description="This snippet returns a new array with n elements removed from the left." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_dropRight" value="/*This snippet returns a new array with n elements removed from the right.*/&#10;const dropRight = (arr, n = 1) =&gt; arr.slice(0, -n);&#10;/*&#10;dropRight([1, 2, 3]); // [1,2]&#10;dropRight([1, 2, 3], 2); // [1]&#10;dropRight([1, 2, 3], 42); // []&#10;*/" description="This snippet returns a new array with n elements removed from the right." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_dropRightWhile" value="/*This snippet removes elements from the right side of an array until the passed function returns true.*/&#10;const dropRightWhile = (arr, func) =&gt; {&#10;  while (arr.length &gt; 0 &amp;&amp; !func(arr[arr.length - 1])) arr = arr.slice(0, -1);&#10;  return arr;&#10;};&#10;/*&#10;dropRightWhile([1, 2, 3, 4], n =&gt; n &lt; 3); // [1, 2]&#10;*/" description="This snippet removes elements from the right side of an array until the passed function returns true." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_dropWhile" value="/*This snippet removes elements from an array until the passed function returns true.*/&#10;const dropWhile = (arr, func) =&gt; {&#10;  while (arr.length &gt; 0 &amp;&amp; !func(arr[0])) arr = arr.slice(1);&#10;  return arr;&#10;};&#10;/*&#10;dropWhile([1, 2, 3, 4], n =&gt; n &gt;= 3); // [3,4]&#10;*/" description="This snippet removes elements from an array until the passed function returns true." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_filterDupElm" value="/*This snippet removes duplicate values in an array.*/&#10;const filterNonUnique = arr =&gt; [ …new Set(arr)];&#10;/*&#10;filterNonUnique([1, 2, 2, 3, 4, 4, 5]); // [1, 2, 3, 4, 5]&#10;*/" description="This snippet removes duplicate values in an array." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_findKey" value="/*This snippet returns the first key that satisfies a given function.*/&#10;const findKey = (obj, fn) =&gt; Object.keys(obj).find(key =&gt; fn(obj[key], key, obj));&#10;/*&#10;findKey(&#10;  {&#10;    barney: { age: 36, active: true },&#10;    fred: { age: 40, active: false },&#10;    pebbles: { age: 1, active: true }&#10;  },&#10;  o =&gt; o['active']&#10;); // 'barney'&#10;*/" description="This snippet returns the first key that satisfies a given function." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_findLast" value="/*This snippet returns the last element for which a given function returns a truthy value.*/&#10;const findLast = (arr, fn) =&gt; arr.filter(fn).pop();&#10;/*&#10;findLast([1, 2, 3, 4], n =&gt; n % 2 === 1); // 3&#10;*/" description="This snippet returns the last element for which a given function returns a truthy value." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_flatten" value="/*This snippet flattens an array up to a specified depth using recursion.*/&#10;const flatten = (arr, depth = 1) =&gt;&#10;  arr.reduce((a, v) =&gt; a.concat(depth &gt; 1 &amp;&amp; Array.isArray(v) ? flatten(v, depth - 1) : v), []);&#10;/*&#10;flatten([1, [2], 3, 4]); // [1, 2, 3, 4]&#10;flatten([1, [2, [3, [4, 5], 6], 7], 8], 2); // [1, 2, 3, [4, 5], 6, 7, 8]&#10;*/" description="This snippet flattens an array up to a specified depth using recursion." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_forEachRight" value="/*This snippet executes a function for each element of an array starting from the array’s last element.*/&#10;const forEachRight = (arr, callback) =&gt;&#10;  arr&#10;    .slice(0)&#10;    .reverse()&#10;    .forEach(callback);&#10;/*&#10;forEachRight([1, 2, 3, 4], val =&gt; console.log(val)); // '4', '3', '2', '1'&#10;*/" description="This snippet executes a function for each element of an array starting from the array’s last element." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_forOwn" value="/*This snippet iterates on each property of an object and iterates a callback for each one respectively.*/&#10;const forOwn = (obj, fn) =&gt; Object.keys(obj).forEach(key =&gt; fn(obj[key], key, obj));&#10;/*&#10;forOwn({ foo: 'bar', a: 1 }, v =&gt; console.log(v)); // 'bar', 1&#10;*/" description="This snippet iterates on each property of an object and iterates a callback for each one respectively." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_funcName" value="/*This snippet prints the name of a function into the console.*/&#10;const functionName = fn =&gt; (console.debug(fn.name), fn);&#10;/*&#10;functionName(Math.max); // max (logged in debug channel of console)&#10;*/" description="This snippet prints the name of a function into the console." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_getTime" value="/*This snippet can be used to get the time from a Dateobject as a string.*/&#10;const getColonTimeFromDate = date =&gt; date.toTimeString().slice(0, 8);&#10;/*&#10;getColonTimeFromDate(new Date()); // &quot;08:38:00&quot;&#10;*/" description="This snippet can be used to get the time from a Dateobject as a string." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_getDayBeetwenDates" value="/*This snippet can be used to find the difference in days between two dates.*/&#10;const getDaysDiffBetweenDates = (dateInitial, dateFinal) =&gt;&#10;  (dateFinal - dateInitial) / (1000 * 3600 * 24);&#10;/*&#10;getDaysDiffBetweenDates(new Date('2019-01-13'), new Date('2019-01-15')); // 2&#10;*/" description="This snippet can be used to find the difference in days between two dates." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_getType" value="/*This snippet can be used to get the type of a value.*/&#10;const getType = v =&gt;&#10;  v === undefined ? 'undefined' : v === null ? 'null' : v.constructor.name.toLowerCase();&#10;/*&#10;getType(new Set([1, 2, 3])); // 'set'&#10;*/" description="This snippet can be used to get the type of a value." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_headOfList" value="/*This snippet returns the head of a list.*/&#10;const head = arr =&gt; arr[0];&#10;/*&#10;head([1, 2, 3]); // 1&#10;*/" description="This snippet returns the head of a list." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_indexOfAll" value="/*This snippet can be used to get all indexes of a value in an array, which returns an empty array, &#10;in case this value is not included in it.*/&#10;const indexOfAll = (arr, val) =&gt; arr.reduce((acc, el, i) =&gt; (el === val ? [...acc, i] : acc), []);&#10;/*&#10;indexOfAll([1, 2, 3, 1, 2, 3], 1); // [0,3]&#10;indexOfAll([1, 2, 3], 4); // []&#10;*/" description="This snippet can be used to get all indexes of a value in an array, which returns an empty array, in case this value is not included in it." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_initial" value="/*This snippet returns all elements of an array except the last one.*/&#10;const initial = arr =&gt; arr.slice(0, -1);&#10;/*&#10;initial([1, 2, 3]); // [1,2]const initial = arr =&gt; arr.slice(0, -1);&#10;initial([1, 2, 3]); // [1,2]&#10;*/" description="This snippet returns all elements of an array except the last one." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_intersection" value="/*This snippet can be used to get an array with elements that are included in two other arrays.*/&#10;const intersection = (a, b) =&gt; {&#10;  const s = new Set(b);&#10;  return a.filter(x =&gt; s.has(x));&#10;};&#10;/*&#10;intersection([1, 2, 3], [4, 3, 2]); // [2, 3]&#10;*/" description="This snippet can be used to get an array with elements that are included in two other arrays." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_intersectionBy" value="/*This snippet can be used to return a list of elements that exist in both arrays, &#10;after a particular function has been executed to each element of both arrays.*/&#10;const intersectionBy = (a, b, fn) =&gt; {&#10;  const s = new Set(b.map(fn));&#10;  return a.filter(x =&gt; s.has(fn(x)));&#10;};&#10;/*&#10;intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor); // [2.1]&#10;*/" description="This snippet can be used to return a list of elements that exist in both arrays, after a particular function has been executed to each element of both arrays." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_is" value="/*This snippet can be used to check if a value is of a particular type.*/&#10;const is = (type, val) =&gt; ![, null].includes(val) &amp;&amp; val.constructor === type;&#10;/*&#10;is(Array, [1]); // true&#10;is(ArrayBuffer, new ArrayBuffer()); // true&#10;is(Map, new Map()); // true&#10;is(RegExp, /./g); // true&#10;is(Set, new Set()); // true&#10;is(WeakMap, new WeakMap()); // true&#10;is(WeakSet, new WeakSet()); // true&#10;is(String, ''); // true&#10;is(String, new String('')); // true&#10;is(Number, 1); // true&#10;is(Number, new Number(1)); // true&#10;is(Boolean, true); // true&#10;is(Boolean, new Boolean(true)); // true&#10;*/" description="This snippet can be used to check if a value is of a particular type." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isAfterDate" value="/*This snippet can be used to check whether a date is after another date.*/&#10;const isAfterDate = (dateA, dateB) =&gt; dateA &gt; dateB;&#10;/*&#10;isAfterDate(new Date(2010, 10, 21), new Date(2010, 10, 20)); // true&#10;*/" description="This snippet can be used to check whether a date is after another date." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isAnagram" value="/*This snippet can be used to check whether a particular string is an anagram with another string.*/&#10;const isAnagram = (str1, str2) =&gt; {&#10;  const normalize = str =&gt;&#10;    str&#10;      .toLowerCase()&#10;      .replace(/[^a-z0-9]/gi, '')&#10;      .split('')&#10;      .sort()&#10;      .join('');&#10;  return normalize(str1) === normalize(str2);&#10;};&#10;/*&#10;isAnagram('iceman', 'cinema'); // true&#10;*/" description="This snippet can be used to check whether a particular string is an anagram with another string." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isArrayLike" value="/*This snippet can be used to check if a provided argument is iterable like an array.*/&#10;const isArrayLike = obj =&gt; obj != null &amp;&amp; typeof obj[Symbol.iterator] === 'function';&#10;/*&#10;isArrayLike(document.querySelectorAll('.className')); // true&#10;isArrayLike('abc'); // true&#10;isArrayLike(null); // false&#10;*/" description="This snippet can be used to check if a provided argument is iterable like an array." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isBeforeDate" value="/*This snippet can be used to check whether a date is before another date.*/&#10;const isBeforeDate = (dateA, dateB) =&gt; dateA &lt; dateB;&#10;/*&#10;isBeforeDate(new Date(2010, 10, 20), new Date(2010, 10, 21)); // true&#10;*/" description="This snippet can be used to check whether a date is before another date." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isBoolean" value="/*This snippet can be used to check whether an argument is a boolean.*/&#10;const isBoolean = val =&gt; typeof val === 'boolean';&#10;/*&#10;isBoolean(null); // false&#10;isBoolean(false); // true&#10;*/" description="This snippet can be used to check whether an argument is a boolean." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isLowerCase" value="/*This snippet can be used to determine whether a string is lower case.*/&#10;const isLowerCase = str =&gt; str === str.toLowerCase();&#10;/*&#10;isLowerCase('abc'); // true&#10;isLowerCase('a3@$'); // true&#10;isLowerCase('Ab4'); // false&#10;*/" description="This snippet can be used to determine whether a string is lower case." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isNil" value="/*This snippet can be used to check whether a value is null or undefined.*/&#10;const isNil = val =&gt; val === undefined || val === null;&#10;/*&#10;isNil(null); // true&#10;isNil(undefined); // true&#10;*/" description="This snippet can be used to check whether a value is null or undefined." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isNull" value="/*This snippet can be used to check whether a value is null.*/&#10;const isNull = val =&gt; val === null;&#10;/*&#10;isNull(null); // true&#10;*/" description="This snippet can be used to check whether a value is null." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isNumber" value="/*This snippet can be used to check whether a provided value is a number.*/&#10;function isNumber(n) {&#10;    return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);&#10;}&#10;/*&#10;isNumber('1'); // false&#10;isNumber(1); // true&#10;*/" description="This snippet can be used to check whether a provided value is a number." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isObject" value="/*This snippet can be used to check whether a provided value is an object. &#10;It uses the Object constructor to create an object wrapper for the given value.&#10;If it is already an object, then an object type that corresponds to the given value will be returned. &#10;Otherwise, a new object will be returned.*/&#10;const isObject = obj =&gt; obj === Object(obj);&#10;/*&#10;isObject([1, 2, 3, 4]); // true&#10;isObject([]); // true&#10;isObject(['Hello!']); // true&#10;isObject({ a: 1 }); // true&#10;isObject({}); // true&#10;isObject(true); // false&#10;*/" description="This snippet can be used to check whether a provided value is an object. It uses the Object constructor to create an object wrapper for the given value." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isObjectLike" value="/*This snippet can be used to check if a value is not nulland that its typeof is “object”.*/&#10;const isObjectLike = val =&gt; val !== null &amp;&amp; typeof val === 'object';&#10;/*&#10;isObjectLike({}); // true&#10;isObjectLike([1, 2, 3]); // true&#10;isObjectLike(x =&gt; x); // false&#10;isObjectLike(null); // false&#10;*/" description="This snippet can be used to check if a value is not nulland that its typeof is “object”." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isPlainObject" value="/*This snippet checks whether a value is an object created by the Object constructor.*/&#10;const isPlainObject = val =&gt; !!val &amp;&amp; typeof val === 'object' &amp;&amp; val.constructor === Object;&#10;/*&#10;isPlainObject({ a: 1 }); // true&#10;isPlainObject(new Map()); // false&#10;*/" description="This snippet checks whether a value is an object created by the Object constructor." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isPromiseLike" value="/*This snippet checks whether an object looks like a Promise.*/&#10;const isPromiseLike = obj =&gt;&#10;  obj !== null &amp;&amp;&#10;  (typeof obj === 'object' || typeof obj === 'function') &amp;&amp;&#10;  typeof obj.then === 'function';&#10;&#10;isPromiseLike({&#10;  then: function() {&#10;    return '';&#10;  }&#10;}); // true&#10;/*&#10;isPromiseLike(null); // false&#10;isPromiseLike({}); // false&#10;*/" description="This snippet checks whether an object looks like a Promise." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isSameDate" value="/*This snippet can be used to check whether two dates are equal.*/&#10;const isSameDate = (dateA, dateB) =&gt; dateA.toISOString() === dateB.toISOString();&#10;/*&#10;isSameDate(new Date(2010, 10, 20), new Date(2010, 10, 20)); // true&#10;*/" description="This snippet can be used to check whether two dates are equal." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isString" value="/*This snippet can be used to check whether an argument is a string.*/&#10;const isSymbol = val =&gt; typeof val === 'symbol';&#10;/*&#10;isSymbol(Symbol('x')); // true&#10;*/" description="This snippet can be used to check whether an argument is a string." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isUndefined" value="/*This snippet can be used to check whether a value is undefined.*/&#10;const isUndefined = val =&gt; val === undefined;&#10;/*&#10;isUndefined(undefined); // true&#10;*/" description="This snippet can be used to check whether a value is undefined." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isUpperCase" value="/*This snippet can be used to check whether a string is upper case.*/&#10;const isUpperCase = str =&gt; str === str.toUpperCase();&#10;/*&#10;isUpperCase('ABC'); // true&#10;isLowerCase('A3@$'); // true&#10;isLowerCase('aB4'); // false&#10;*/" description="This snippet can be used to check whether a string is upper case." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_isValidJSON" value="/*This snippet can be used to check whether a string is a valid JSON.*/&#10;const isValidJSON = str =&gt; {&#10;  try {&#10;    JSON.parse(str);&#10;    return true;&#10;  } catch (e) {&#10;    return false;&#10;  }&#10;};&#10;/*&#10;isValidJSON('{&quot;name&quot;:&quot;Adam&quot;,&quot;age&quot;:20}'); // true&#10;isValidJSON('{&quot;name&quot;:&quot;Adam&quot;,age:&quot;20&quot;}'); // false&#10;isValidJSON(null); // true&#10;*/" description="This snippet can be used to check whether a string is a valid JSON." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_last" value="/*This snippet returns the last element of an array.*/&#10;const last = arr =&gt; arr[arr.length - 1];&#10;/*&#10;last([1, 2, 3]); // 3&#10;*/" description="This snippet returns the last element of an array." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_matchesObj" value="/*This snippet compares two objects to determine if the first one contains&#10;the same property values as the second one.*/&#10;const matches = (obj, source) =&gt;&#10;  Object.keys(source).every(key =&gt; obj.hasOwnProperty(key) &amp;&amp; obj[key] === source[key]);&#10;/*&#10;matches({ age: 25, hair: 'long', beard: true }, { hair: 'long', beard: true }); // true&#10;matches({ hair: 'long', beard: true }, { age: 25, hair: 'long', beard: true }); // false&#10;*/" description="This snippet compares two objects to determine if the first one contains the same property values as the second one." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_maxDate" value="/*This snippet can be used to get the latest date.*/&#10;const maxDate = (...dates) =&gt; new Date(Math.max.apply(null, ...dates));&#10;/*&#10;const array = [&#10;  new Date(2017, 4, 13),&#10;  new Date(2018, 2, 12),&#10;  new Date(2016, 0, 10),&#10;  new Date(2016, 0, 9)&#10;];&#10;maxDate(array); // 2018-03-11T22:00:00.000Z&#10;*/" description="This snippet can be used to get the latest date." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_maxN" value="/*This snippet returns the n largest elements from a list. If nis greater than or equal to the list’s length, &#10;then it will return the original list (sorted in descending order).*/&#10;const maxN = (arr, n = 1) =&gt; [...arr].sort((a, b) =&gt; b - a).slice(0, n);&#10;/*&#10;maxN([1, 2, 3]); // [3]&#10;maxN([1, 2, 3], 2); // [3,2]&#10;*/" description="This snippet returns the n largest elements from a list. If nis greater than or equal to the list’s length, then it will return the original list (sorted in descending order)." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_minDate" value="/*This snippet can be used to get the earliest date.*/&#10;const minDate = (...dates) =&gt; new Date(Math.min.apply(null, ...dates));&#10;/*&#10;const array = [&#10;  new Date(2017, 4, 13),&#10;  new Date(2018, 2, 12),&#10;  new Date(2016, 0, 10),&#10;  new Date(2016, 0, 9)&#10;];&#10;minDate(array); // 2016-01-08T22:00:00.000Z&#10;*/" description="This snippet can be used to get the earliest date." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_minN" value="/*This snippet returns the n smallest elements from a list. If nis greater than or equal to the list’s length,&#10;then it will return the original list (sorted in ascending order).*/&#10;const minN = (arr, n = 1) =&gt; [...arr].sort((a, b) =&gt; a - b).slice(0, n);&#10;/*&#10;minN([1, 2, 3]); // [1]&#10;minN([1, 2, 3], 2); // [1,2]&#10;*/" description="This snippet returns the n smallest elements from a list. If nis greater than or equal to the list’s length, then it will return the original list (sorted in ascending order)." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_negate" value="/*This snippet can be used to apply the not operator (!) to a predicate function with its arguments.*/&#10;const negate = func =&gt; (...args) =&gt; !func(...args);&#10;/*&#10;[1, 2, 3, 4, 5, 6].filter(negate(n =&gt; n % 2 === 0)); // [ 1, 3, 5 ]&#10;*/" description="This snippet can be used to apply the not operator (!) to a predicate function with its arguments." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_radsToDegrees" value="/*This snippet can be used to convert an angle from radians to degrees.*/&#10;const radsToDegrees = rad =&gt; (rad * 180.0) / Math.PI;&#10;/*&#10;radsToDegrees(Math.PI / 2); // 90&#10;*/" description="This snippet can be used to convert an angle from radians to degrees." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_randomHexColor" value="/*This snippet can be used to generate a random hexadecimal color code.*/&#10;const randomHexColorCode = () =&gt; {&#10;  let n = (Math.random() * 0xfffff * 1000000).toString(16);&#10;  return '#' + n.slice(0, 6);&#10;};&#10;/*&#10;randomHexColorCode(); // &quot;#e34155&quot;&#10;*/" description="This snippet can be used to generate a random hexadecimal color code." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_randomIntArrayInRange" value="/*This snippet can be used to generate an array with n random integers in a specified range.*/&#10;const randomIntArrayInRange = (min, max, n = 1) =&gt;&#10;  Array.from({ length: n }, () =&gt; Math.floor(Math.random() * (max - min + 1)) + min);&#10;/*&#10;randomIntArrayInRange(12, 35, 10); // [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]&#10;*/" description="This snippet can be used to generate an array with n random integers in a specified range." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_randomNumberInRange" value="/*This snippet can be used to return a random number in a specified range.*/&#10;const randomNumberInRange = (min, max) =&gt; Math.random() * (max - min) + min;&#10;/*&#10;randomNumberInRange(2, 10); // 6.0211363285087005&#10;*/" description="This snippet can be used to return a random number in a specified range." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_readFileLines" value="/*This snippet can be used to read a file by getting an array of lines from a file.*/&#10;const fs = require('fs');&#10;const readFileLines = filename =&gt;&#10;  fs&#10;    .readFileSync(filename)&#10;    .toString('UTF8')&#10;    .split('\n');&#10;&#10;let arr = readFileLines('test.txt');&#10;console.log(arr); // ['line1', 'line2', 'line3']" description="This snippet can be used to read a file by getting an array of lines from a file." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_reverse" value="/*This snippet can be used to reverse a string.*/&#10;const reverseString = str =&gt; [...str].reverse().join('');&#10;/*&#10;reverseString('foobar'); // 'raboof'&#10;*/" description="This snippet can be used to reverse a string." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_round" value="/*This snippet can be used to round a number to a specified number of digits.*/&#10;const round = (n, decimals = 0) =&gt; Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`);&#10;/*&#10;round(1.005, 2); // 1.01&#10;*/" description="This snippet can be used to round a number to a specified number of digits." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_rndGetFromArray" value="/*This snippet can be used to get a random number from an array.*/&#10;const sample = arr =&gt; arr[Math.floor(Math.random() * arr.length)];&#10;/*&#10;sample([3, 7, 9, 11]); // 9&#10;*/" description="This snippet can be used to get a random number from an array." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsd_sampleSizeArray" value="/*This snippet can be used to get nrandom elements from unique positions from an array up to the size of the array. &#10;Elements in the array are shuffled using the Fisher-Yates algorithm*/&#10;const sampleSize = ([...arr], n = 1) =&gt; {&#10;let m = arr.length;&#10;while (m) {&#10;const i = Math.floor(Math.random() * m--);&#10;[arr[m], arr[i]] = [arr[i], arr[m]];&#10;}&#10;return arr.slice(0, n);&#10;};&#10;/*&#10;sampleSize([1, 2, 3], 2); // [3,1]&#10;sampleSize([1, 2, 3], 4); // [2,3,1]&#10;*/" description="This snippet can be used to get nrandom elements from unique positions from an array up to the size of the array. Elements in the array are shuffled using the Fisher-Yates algorithm" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>